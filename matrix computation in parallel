#matrix generator
matrixgenerator:=function(size,low,high)
local i,j,mat,list;
mat:=[];
for i in[1..size] do
list:=[];
for j in [1..size] do
Append(list,[Random(low,high)]);
od;
Append(mat,[list]);
od;
return mat;
end;

## matrix multiplication in parallel
ParInstallTOPCGlobalFunction( "ParMultMat", function(m1, m2)
local i, n, m2t, result, DoTask, CheckTaskResult, UpdateSharedData;
n := Length(m1);
result := [];
m2t := TransposedMat(m2);
DoTask := function(i) # i is task input
local j, k, sum;
result[i] := [];
for j in [1..n] do
sum := 0;
for k in [1..n] do
sum := sum + m1[i][k]*m2t[j][k];
od;
result[i][j] := sum;
od;
return result[i]; # return task output, row_i
end;
# CheckTaskResult executes only on the master
CheckTaskResult := function(i, row_i) # task output is row_i
return UPDATE_ACTION; # Pass on output and input to UpdateSharedData
end;
# UpdateSharedData executes on the master and on all slaves
UpdateSharedData := function(i, row_i) # task output is row_i
result[i] := row_i;
end;
# We're done defining the task. Let's do it now.
MasterSlave( TaskInputIterator([1..n]), DoTask, CheckTaskResult,
UpdateSharedData );
# result is defined on all processes; return local copy of result
return result;
end );
